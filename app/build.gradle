apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.mikepenz.aboutlibraries.plugin'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "net.vonforst.evmap"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 51
        versionName "0.8.3"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            def isRunningOnTravis = System.getenv("CI") == "true"
            if (isRunningOnTravis) {
                // configure keystore
                storeFile = file("../_ci/keystore.jks")
                storePassword = System.getenv("keystore_password")
                keyAlias = System.getenv("keystore_alias")
                keyPassword = System.getenv("keystore_alias_password")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
    }

    flavorDimensions "dependencies"
    productFlavors {
        foss {
            dimension "dependencies"
        }
        google {
            dimension "dependencies"
            versionNameSuffix "-google"
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        targetCompatibility = JavaVersion.VERSION_1_8
        sourceCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        dataBinding = true
        viewBinding true
    }

    // add API keys from environment variable if not set in apikeys.xml
    applicationVariants.all { variant ->
        ext.env = System.getenv()
        def goingelectricKey = env.GOINGELECTRIC_API_KEY ?: project.findProperty("GOINGELECTRIC_API_KEY")
        if (goingelectricKey != null) {
            variant.resValue "string", "goingelectric_key", goingelectricKey
        }
        def openchargemapKey = env.OPENCHARGEMAP_API_KEY ?: project.findProperty("OPENCHARGEMAP_API_KEY")
        if (openchargemapKey == null && project.hasProperty("OPENCHARGEMAP_API_KEY_ENCRYPTED")) {
            openchargemapKey = decode(project.findProperty("OPENCHARGEMAP_API_KEY_ENCRYPTED"), "FmK.d,-f*p+rD+WK!eds")
        }
        if (openchargemapKey != null) {
            variant.resValue "string", "openchargemap_key", openchargemapKey
        }
        def googleMapsKey = env.GOOGLE_MAPS_API_KEY ?: project.findProperty("GOOGLE_MAPS_API_KEY")
        if (googleMapsKey != null && variant.flavorName == 'google') {
            variant.resValue "string", "google_maps_key", googleMapsKey
        }
        def mapboxKey = env.MAPBOX_API_KEY ?: project.findProperty("MAPBOX_API_KEY")
        if (mapboxKey != null) {
            variant.resValue "string", "mapbox_key", mapboxKey
        }
        def chargepriceKey = env.CHARGEPRICE_API_KEY ?: project.findProperty("CHARGEPRICE_API_KEY")
        if (chargepriceKey == null && project.hasProperty("CHARGEPRICE_API_KEY_ENCRYPTED")) {
            chargepriceKey = decode(project.findProperty("CHARGEPRICE_API_KEY_ENCRYPTED"), "FmK.d,-f*p+rD+WK!eds")
        }
        if (chargepriceKey != null) {
            variant.resValue "string", "chargeprice_key", chargepriceKey
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation "androidx.activity:activity-ktx:1.2.3"
    implementation "androidx.fragment:fragment-ktx:1.3.4"
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.recyclerview:recyclerview:1.2.0'
    implementation 'androidx.browser:browser:1.3.0'
    implementation 'com.github.johan12345:CustomBottomSheetBehavior:f69f532660'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:4.9.0'
    implementation 'com.squareup.moshi:moshi-kotlin:1.12.0'
    implementation 'com.squareup.moshi:moshi-adapters:1.12.0'
    implementation 'moe.banana:moshi-jsonapi:3.5.0'
    implementation 'moe.banana:moshi-jsonapi-retrofit-converter:3.5.0'
    implementation 'io.coil-kt:coil:1.1.0'
    implementation 'com.github.johan12345:StfalconImageViewer:5082ebd392'
    implementation "com.mikepenz:aboutlibraries-core:$about_libs_version"
    implementation "com.mikepenz:aboutlibraries:$about_libs_version"
    implementation 'com.airbnb.android:lottie:3.4.0'
    implementation 'io.michaelrocks.bimap:bimap:1.1.0'
    implementation 'com.mapzen.android:lost:3.0.2'
    implementation 'com.google.guava:guava:29.0-android'
    implementation 'com.github.pengrad:mapscaleview:1.6.0'
    implementation 'com.github.romandanylyk:PageIndicatorView:b1bad589b5'

    // Android Auto
    googleImplementation 'androidx.car.app:app:1.1.0-alpha02'
    googleImplementation 'androidx.car.app:app-projected:1.1.0-alpha02'

    // AnyMaps
    def anyMapsVersion = '95ddd6c083'
    implementation "com.github.johan12345.AnyMaps:anymaps-base:$anyMapsVersion"
    googleImplementation "com.github.johan12345.AnyMaps:anymaps-google:$anyMapsVersion"
    implementation "com.github.johan12345.AnyMaps:anymaps-mapbox:$anyMapsVersion"

    // Google Maps v3 Beta
    googleImplementation 'com.google.android.libraries.maps:maps:3.1.0-beta'
    googleImplementation name:'places-maps-sdk-3.1.0-beta', ext:'aar'
    googleImplementation 'com.android.volley:volley:1.2.0'
    googleImplementation 'com.google.android.gms:play-services-base:17.5.0'
    googleImplementation 'com.google.android.gms:play-services-basement:17.5.0'
    googleImplementation 'com.google.android.gms:play-services-gcm:17.0.0'
    googleImplementation 'com.google.android.gms:play-services-location:17.1.0'
    googleImplementation 'com.google.android.gms:play-services-tasks:17.2.0'
    googleImplementation 'com.google.auto.value:auto-value-annotations:1.6.3'
    googleImplementation 'com.google.code.gson:gson:2.8.6'
    googleImplementation 'com.google.android.datatransport:transport-runtime:2.2.5'
    googleImplementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    // Mapbox places (autocomplete)
    // forked this library and included through JitPack to fix https://github.com/mapbox/mapbox-plugins-android/issues/1011
    implementation('com.github.johan12345.mapbox-plugins-android:mapbox-android-plugin-places-v9:922bf877f6') {
        exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-accounts'
        exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-telemetry'
    }

    // navigation library
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // viewmodel library
    def lifecycle_version = "2.3.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // room library
    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // billing library
    def billing_version = "4.0.0"
    googleImplementation "com.android.billingclient:billing:$billing_version"
    googleImplementation "com.android.billingclient:billing-ktx:$billing_version"

    // debug tools
    implementation 'com.facebook.stetho:stetho:1.5.1'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'
    testImplementation 'junit:junit:4.13'
    testImplementation "com.squareup.okhttp3:mockwebserver:4.9.0"
    //noinspection GradleDependency
    testImplementation 'org.json:json:20080701'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.12.0"

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
}

private static String decode(String s, String key) {
    return new String(xorWithKey(s.decodeBase64(), key.getBytes()), "UTF-8");
}

private static byte[] xorWithKey(byte[] a, byte[] key) {
    byte[] out = new byte[a.length];
    for (int i = 0; i < a.length; i++) {
        out[i] = (byte) (a[i] ^ key[i%key.length]);
    }
    return out;
}